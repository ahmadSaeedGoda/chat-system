// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	models "chat-system/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MessageService is an autogenerated mock type for the MessageService type
type MessageService struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: message
func (_m *MessageService) CreateMessage(message *models.Message) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for CreateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFromCache provides a mock function with given fields: cacheKey
func (_m *MessageService) GetFromCache(cacheKey string) ([]models.Message, error) {
	ret := _m.Called(cacheKey)

	if len(ret) == 0 {
		panic("no return value specified for GetFromCache")
	}

	var r0 []models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Message, error)); ok {
		return rf(cacheKey)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Message); ok {
		r0 = rf(cacheKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cacheKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: username
func (_m *MessageService) GetMessages(username string) ([]models.Message, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []models.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.Message, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) []models.Message); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetMessagesToCache provides a mock function with given fields: cacheKey, messages
func (_m *MessageService) SetMessagesToCache(cacheKey string, messages []models.Message) error {
	ret := _m.Called(cacheKey, messages)

	if len(ret) == 0 {
		panic("no return value specified for SetMessagesToCache")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []models.Message) error); ok {
		r0 = rf(cacheKey, messages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCachedMsgsForUser provides a mock function with given fields: cacheKey, msg
func (_m *MessageService) UpdateCachedMsgsForUser(cacheKey string, msg *models.Message) error {
	ret := _m.Called(cacheKey, msg)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCachedMsgsForUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.Message) error); ok {
		r0 = rf(cacheKey, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMessageService creates a new instance of MessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageService {
	mock := &MessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
